// Code generated by ent, DO NOT EDIT.

package ent

import (
	"Backend/ent/website"
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// WebsiteCreate is the builder for creating a Website entity.
type WebsiteCreate struct {
	config
	mutation *WebsiteMutation
	hooks    []Hook
}

// SetName sets the "name" field.
func (wc *WebsiteCreate) SetName(s string) *WebsiteCreate {
	wc.mutation.SetName(s)
	return wc
}

// SetFilePath sets the "filePath" field.
func (wc *WebsiteCreate) SetFilePath(s string) *WebsiteCreate {
	wc.mutation.SetFilePath(s)
	return wc
}

// SetURL sets the "url" field.
func (wc *WebsiteCreate) SetURL(s string) *WebsiteCreate {
	wc.mutation.SetURL(s)
	return wc
}

// SetFlashy sets the "flashy" field.
func (wc *WebsiteCreate) SetFlashy(f float64) *WebsiteCreate {
	wc.mutation.SetFlashy(f)
	return wc
}

// SetAdult sets the "adult" field.
func (wc *WebsiteCreate) SetAdult(f float64) *WebsiteCreate {
	wc.mutation.SetAdult(f)
	return wc
}

// SetSmart sets the "smart" field.
func (wc *WebsiteCreate) SetSmart(f float64) *WebsiteCreate {
	wc.mutation.SetSmart(f)
	return wc
}

// SetBeautiful sets the "beautiful" field.
func (wc *WebsiteCreate) SetBeautiful(f float64) *WebsiteCreate {
	wc.mutation.SetBeautiful(f)
	return wc
}

// SetLike sets the "like" field.
func (wc *WebsiteCreate) SetLike(f float64) *WebsiteCreate {
	wc.mutation.SetLike(f)
	return wc
}

// Mutation returns the WebsiteMutation object of the builder.
func (wc *WebsiteCreate) Mutation() *WebsiteMutation {
	return wc.mutation
}

// Save creates the Website in the database.
func (wc *WebsiteCreate) Save(ctx context.Context) (*Website, error) {
	return withHooks(ctx, wc.sqlSave, wc.mutation, wc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (wc *WebsiteCreate) SaveX(ctx context.Context) *Website {
	v, err := wc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (wc *WebsiteCreate) Exec(ctx context.Context) error {
	_, err := wc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (wc *WebsiteCreate) ExecX(ctx context.Context) {
	if err := wc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (wc *WebsiteCreate) check() error {
	if _, ok := wc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "Website.name"`)}
	}
	if _, ok := wc.mutation.FilePath(); !ok {
		return &ValidationError{Name: "filePath", err: errors.New(`ent: missing required field "Website.filePath"`)}
	}
	if _, ok := wc.mutation.URL(); !ok {
		return &ValidationError{Name: "url", err: errors.New(`ent: missing required field "Website.url"`)}
	}
	if _, ok := wc.mutation.Flashy(); !ok {
		return &ValidationError{Name: "flashy", err: errors.New(`ent: missing required field "Website.flashy"`)}
	}
	if _, ok := wc.mutation.Adult(); !ok {
		return &ValidationError{Name: "adult", err: errors.New(`ent: missing required field "Website.adult"`)}
	}
	if _, ok := wc.mutation.Smart(); !ok {
		return &ValidationError{Name: "smart", err: errors.New(`ent: missing required field "Website.smart"`)}
	}
	if _, ok := wc.mutation.Beautiful(); !ok {
		return &ValidationError{Name: "beautiful", err: errors.New(`ent: missing required field "Website.beautiful"`)}
	}
	if _, ok := wc.mutation.Like(); !ok {
		return &ValidationError{Name: "like", err: errors.New(`ent: missing required field "Website.like"`)}
	}
	return nil
}

func (wc *WebsiteCreate) sqlSave(ctx context.Context) (*Website, error) {
	if err := wc.check(); err != nil {
		return nil, err
	}
	_node, _spec := wc.createSpec()
	if err := sqlgraph.CreateNode(ctx, wc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	wc.mutation.id = &_node.ID
	wc.mutation.done = true
	return _node, nil
}

func (wc *WebsiteCreate) createSpec() (*Website, *sqlgraph.CreateSpec) {
	var (
		_node = &Website{config: wc.config}
		_spec = sqlgraph.NewCreateSpec(website.Table, sqlgraph.NewFieldSpec(website.FieldID, field.TypeInt))
	)
	if value, ok := wc.mutation.Name(); ok {
		_spec.SetField(website.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := wc.mutation.FilePath(); ok {
		_spec.SetField(website.FieldFilePath, field.TypeString, value)
		_node.FilePath = value
	}
	if value, ok := wc.mutation.URL(); ok {
		_spec.SetField(website.FieldURL, field.TypeString, value)
		_node.URL = value
	}
	if value, ok := wc.mutation.Flashy(); ok {
		_spec.SetField(website.FieldFlashy, field.TypeFloat64, value)
		_node.Flashy = &value
	}
	if value, ok := wc.mutation.Adult(); ok {
		_spec.SetField(website.FieldAdult, field.TypeFloat64, value)
		_node.Adult = &value
	}
	if value, ok := wc.mutation.Smart(); ok {
		_spec.SetField(website.FieldSmart, field.TypeFloat64, value)
		_node.Smart = &value
	}
	if value, ok := wc.mutation.Beautiful(); ok {
		_spec.SetField(website.FieldBeautiful, field.TypeFloat64, value)
		_node.Beautiful = &value
	}
	if value, ok := wc.mutation.Like(); ok {
		_spec.SetField(website.FieldLike, field.TypeFloat64, value)
		_node.Like = &value
	}
	return _node, _spec
}

// WebsiteCreateBulk is the builder for creating many Website entities in bulk.
type WebsiteCreateBulk struct {
	config
	err      error
	builders []*WebsiteCreate
}

// Save creates the Website entities in the database.
func (wcb *WebsiteCreateBulk) Save(ctx context.Context) ([]*Website, error) {
	if wcb.err != nil {
		return nil, wcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(wcb.builders))
	nodes := make([]*Website, len(wcb.builders))
	mutators := make([]Mutator, len(wcb.builders))
	for i := range wcb.builders {
		func(i int, root context.Context) {
			builder := wcb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*WebsiteMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, wcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, wcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, wcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (wcb *WebsiteCreateBulk) SaveX(ctx context.Context) []*Website {
	v, err := wcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (wcb *WebsiteCreateBulk) Exec(ctx context.Context) error {
	_, err := wcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (wcb *WebsiteCreateBulk) ExecX(ctx context.Context) {
	if err := wcb.Exec(ctx); err != nil {
		panic(err)
	}
}
