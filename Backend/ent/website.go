// Code generated by ent, DO NOT EDIT.

package ent

import (
	"Backend/ent/website"
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// Website is the model entity for the Website schema.
type Website struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// FilePath holds the value of the "filePath" field.
	FilePath string `json:"filePath,omitempty"`
	// URL holds the value of the "url" field.
	URL string `json:"url,omitempty"`
	// Flashy holds the value of the "flashy" field.
	Flashy *float64 `json:"flashy,omitempty"`
	// Adult holds the value of the "adult" field.
	Adult *float64 `json:"adult,omitempty"`
	// Smart holds the value of the "smart" field.
	Smart *float64 `json:"smart,omitempty"`
	// Beautiful holds the value of the "beautiful" field.
	Beautiful *float64 `json:"beautiful,omitempty"`
	// Like holds the value of the "like" field.
	Like         *float64 `json:"like,omitempty"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Website) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case website.FieldFlashy, website.FieldAdult, website.FieldSmart, website.FieldBeautiful, website.FieldLike:
			values[i] = new(sql.NullFloat64)
		case website.FieldID:
			values[i] = new(sql.NullInt64)
		case website.FieldName, website.FieldFilePath, website.FieldURL:
			values[i] = new(sql.NullString)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Website fields.
func (w *Website) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case website.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			w.ID = int(value.Int64)
		case website.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				w.Name = value.String
			}
		case website.FieldFilePath:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field filePath", values[i])
			} else if value.Valid {
				w.FilePath = value.String
			}
		case website.FieldURL:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field url", values[i])
			} else if value.Valid {
				w.URL = value.String
			}
		case website.FieldFlashy:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field flashy", values[i])
			} else if value.Valid {
				w.Flashy = new(float64)
				*w.Flashy = value.Float64
			}
		case website.FieldAdult:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field adult", values[i])
			} else if value.Valid {
				w.Adult = new(float64)
				*w.Adult = value.Float64
			}
		case website.FieldSmart:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field smart", values[i])
			} else if value.Valid {
				w.Smart = new(float64)
				*w.Smart = value.Float64
			}
		case website.FieldBeautiful:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field beautiful", values[i])
			} else if value.Valid {
				w.Beautiful = new(float64)
				*w.Beautiful = value.Float64
			}
		case website.FieldLike:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field like", values[i])
			} else if value.Valid {
				w.Like = new(float64)
				*w.Like = value.Float64
			}
		default:
			w.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Website.
// This includes values selected through modifiers, order, etc.
func (w *Website) Value(name string) (ent.Value, error) {
	return w.selectValues.Get(name)
}

// Update returns a builder for updating this Website.
// Note that you need to call Website.Unwrap() before calling this method if this Website
// was returned from a transaction, and the transaction was committed or rolled back.
func (w *Website) Update() *WebsiteUpdateOne {
	return NewWebsiteClient(w.config).UpdateOne(w)
}

// Unwrap unwraps the Website entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (w *Website) Unwrap() *Website {
	_tx, ok := w.config.driver.(*txDriver)
	if !ok {
		panic("ent: Website is not a transactional entity")
	}
	w.config.driver = _tx.drv
	return w
}

// String implements the fmt.Stringer.
func (w *Website) String() string {
	var builder strings.Builder
	builder.WriteString("Website(")
	builder.WriteString(fmt.Sprintf("id=%v, ", w.ID))
	builder.WriteString("name=")
	builder.WriteString(w.Name)
	builder.WriteString(", ")
	builder.WriteString("filePath=")
	builder.WriteString(w.FilePath)
	builder.WriteString(", ")
	builder.WriteString("url=")
	builder.WriteString(w.URL)
	builder.WriteString(", ")
	if v := w.Flashy; v != nil {
		builder.WriteString("flashy=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteString(", ")
	if v := w.Adult; v != nil {
		builder.WriteString("adult=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteString(", ")
	if v := w.Smart; v != nil {
		builder.WriteString("smart=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteString(", ")
	if v := w.Beautiful; v != nil {
		builder.WriteString("beautiful=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteString(", ")
	if v := w.Like; v != nil {
		builder.WriteString("like=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteByte(')')
	return builder.String()
}

// Websites is a parsable slice of Website.
type Websites []*Website
