// Code generated by ent, DO NOT EDIT.

package ent

import (
	"Backend/ent/predicate"
	"Backend/ent/website"
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// WebsiteUpdate is the builder for updating Website entities.
type WebsiteUpdate struct {
	config
	hooks    []Hook
	mutation *WebsiteMutation
}

// Where appends a list predicates to the WebsiteUpdate builder.
func (wu *WebsiteUpdate) Where(ps ...predicate.Website) *WebsiteUpdate {
	wu.mutation.Where(ps...)
	return wu
}

// SetName sets the "name" field.
func (wu *WebsiteUpdate) SetName(s string) *WebsiteUpdate {
	wu.mutation.SetName(s)
	return wu
}

// SetNillableName sets the "name" field if the given value is not nil.
func (wu *WebsiteUpdate) SetNillableName(s *string) *WebsiteUpdate {
	if s != nil {
		wu.SetName(*s)
	}
	return wu
}

// SetFilePath sets the "filePath" field.
func (wu *WebsiteUpdate) SetFilePath(s string) *WebsiteUpdate {
	wu.mutation.SetFilePath(s)
	return wu
}

// SetNillableFilePath sets the "filePath" field if the given value is not nil.
func (wu *WebsiteUpdate) SetNillableFilePath(s *string) *WebsiteUpdate {
	if s != nil {
		wu.SetFilePath(*s)
	}
	return wu
}

// SetURL sets the "url" field.
func (wu *WebsiteUpdate) SetURL(s string) *WebsiteUpdate {
	wu.mutation.SetURL(s)
	return wu
}

// SetNillableURL sets the "url" field if the given value is not nil.
func (wu *WebsiteUpdate) SetNillableURL(s *string) *WebsiteUpdate {
	if s != nil {
		wu.SetURL(*s)
	}
	return wu
}

// SetFlashy sets the "flashy" field.
func (wu *WebsiteUpdate) SetFlashy(f float64) *WebsiteUpdate {
	wu.mutation.ResetFlashy()
	wu.mutation.SetFlashy(f)
	return wu
}

// SetNillableFlashy sets the "flashy" field if the given value is not nil.
func (wu *WebsiteUpdate) SetNillableFlashy(f *float64) *WebsiteUpdate {
	if f != nil {
		wu.SetFlashy(*f)
	}
	return wu
}

// AddFlashy adds f to the "flashy" field.
func (wu *WebsiteUpdate) AddFlashy(f float64) *WebsiteUpdate {
	wu.mutation.AddFlashy(f)
	return wu
}

// SetAdult sets the "adult" field.
func (wu *WebsiteUpdate) SetAdult(f float64) *WebsiteUpdate {
	wu.mutation.ResetAdult()
	wu.mutation.SetAdult(f)
	return wu
}

// SetNillableAdult sets the "adult" field if the given value is not nil.
func (wu *WebsiteUpdate) SetNillableAdult(f *float64) *WebsiteUpdate {
	if f != nil {
		wu.SetAdult(*f)
	}
	return wu
}

// AddAdult adds f to the "adult" field.
func (wu *WebsiteUpdate) AddAdult(f float64) *WebsiteUpdate {
	wu.mutation.AddAdult(f)
	return wu
}

// SetSmart sets the "smart" field.
func (wu *WebsiteUpdate) SetSmart(f float64) *WebsiteUpdate {
	wu.mutation.ResetSmart()
	wu.mutation.SetSmart(f)
	return wu
}

// SetNillableSmart sets the "smart" field if the given value is not nil.
func (wu *WebsiteUpdate) SetNillableSmart(f *float64) *WebsiteUpdate {
	if f != nil {
		wu.SetSmart(*f)
	}
	return wu
}

// AddSmart adds f to the "smart" field.
func (wu *WebsiteUpdate) AddSmart(f float64) *WebsiteUpdate {
	wu.mutation.AddSmart(f)
	return wu
}

// SetBeautiful sets the "beautiful" field.
func (wu *WebsiteUpdate) SetBeautiful(f float64) *WebsiteUpdate {
	wu.mutation.ResetBeautiful()
	wu.mutation.SetBeautiful(f)
	return wu
}

// SetNillableBeautiful sets the "beautiful" field if the given value is not nil.
func (wu *WebsiteUpdate) SetNillableBeautiful(f *float64) *WebsiteUpdate {
	if f != nil {
		wu.SetBeautiful(*f)
	}
	return wu
}

// AddBeautiful adds f to the "beautiful" field.
func (wu *WebsiteUpdate) AddBeautiful(f float64) *WebsiteUpdate {
	wu.mutation.AddBeautiful(f)
	return wu
}

// SetLike sets the "like" field.
func (wu *WebsiteUpdate) SetLike(f float64) *WebsiteUpdate {
	wu.mutation.ResetLike()
	wu.mutation.SetLike(f)
	return wu
}

// SetNillableLike sets the "like" field if the given value is not nil.
func (wu *WebsiteUpdate) SetNillableLike(f *float64) *WebsiteUpdate {
	if f != nil {
		wu.SetLike(*f)
	}
	return wu
}

// AddLike adds f to the "like" field.
func (wu *WebsiteUpdate) AddLike(f float64) *WebsiteUpdate {
	wu.mutation.AddLike(f)
	return wu
}

// Mutation returns the WebsiteMutation object of the builder.
func (wu *WebsiteUpdate) Mutation() *WebsiteMutation {
	return wu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (wu *WebsiteUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, wu.sqlSave, wu.mutation, wu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (wu *WebsiteUpdate) SaveX(ctx context.Context) int {
	affected, err := wu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (wu *WebsiteUpdate) Exec(ctx context.Context) error {
	_, err := wu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (wu *WebsiteUpdate) ExecX(ctx context.Context) {
	if err := wu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (wu *WebsiteUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(website.Table, website.Columns, sqlgraph.NewFieldSpec(website.FieldID, field.TypeInt))
	if ps := wu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := wu.mutation.Name(); ok {
		_spec.SetField(website.FieldName, field.TypeString, value)
	}
	if value, ok := wu.mutation.FilePath(); ok {
		_spec.SetField(website.FieldFilePath, field.TypeString, value)
	}
	if value, ok := wu.mutation.URL(); ok {
		_spec.SetField(website.FieldURL, field.TypeString, value)
	}
	if value, ok := wu.mutation.Flashy(); ok {
		_spec.SetField(website.FieldFlashy, field.TypeFloat64, value)
	}
	if value, ok := wu.mutation.AddedFlashy(); ok {
		_spec.AddField(website.FieldFlashy, field.TypeFloat64, value)
	}
	if value, ok := wu.mutation.Adult(); ok {
		_spec.SetField(website.FieldAdult, field.TypeFloat64, value)
	}
	if value, ok := wu.mutation.AddedAdult(); ok {
		_spec.AddField(website.FieldAdult, field.TypeFloat64, value)
	}
	if value, ok := wu.mutation.Smart(); ok {
		_spec.SetField(website.FieldSmart, field.TypeFloat64, value)
	}
	if value, ok := wu.mutation.AddedSmart(); ok {
		_spec.AddField(website.FieldSmart, field.TypeFloat64, value)
	}
	if value, ok := wu.mutation.Beautiful(); ok {
		_spec.SetField(website.FieldBeautiful, field.TypeFloat64, value)
	}
	if value, ok := wu.mutation.AddedBeautiful(); ok {
		_spec.AddField(website.FieldBeautiful, field.TypeFloat64, value)
	}
	if value, ok := wu.mutation.Like(); ok {
		_spec.SetField(website.FieldLike, field.TypeFloat64, value)
	}
	if value, ok := wu.mutation.AddedLike(); ok {
		_spec.AddField(website.FieldLike, field.TypeFloat64, value)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, wu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{website.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	wu.mutation.done = true
	return n, nil
}

// WebsiteUpdateOne is the builder for updating a single Website entity.
type WebsiteUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *WebsiteMutation
}

// SetName sets the "name" field.
func (wuo *WebsiteUpdateOne) SetName(s string) *WebsiteUpdateOne {
	wuo.mutation.SetName(s)
	return wuo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (wuo *WebsiteUpdateOne) SetNillableName(s *string) *WebsiteUpdateOne {
	if s != nil {
		wuo.SetName(*s)
	}
	return wuo
}

// SetFilePath sets the "filePath" field.
func (wuo *WebsiteUpdateOne) SetFilePath(s string) *WebsiteUpdateOne {
	wuo.mutation.SetFilePath(s)
	return wuo
}

// SetNillableFilePath sets the "filePath" field if the given value is not nil.
func (wuo *WebsiteUpdateOne) SetNillableFilePath(s *string) *WebsiteUpdateOne {
	if s != nil {
		wuo.SetFilePath(*s)
	}
	return wuo
}

// SetURL sets the "url" field.
func (wuo *WebsiteUpdateOne) SetURL(s string) *WebsiteUpdateOne {
	wuo.mutation.SetURL(s)
	return wuo
}

// SetNillableURL sets the "url" field if the given value is not nil.
func (wuo *WebsiteUpdateOne) SetNillableURL(s *string) *WebsiteUpdateOne {
	if s != nil {
		wuo.SetURL(*s)
	}
	return wuo
}

// SetFlashy sets the "flashy" field.
func (wuo *WebsiteUpdateOne) SetFlashy(f float64) *WebsiteUpdateOne {
	wuo.mutation.ResetFlashy()
	wuo.mutation.SetFlashy(f)
	return wuo
}

// SetNillableFlashy sets the "flashy" field if the given value is not nil.
func (wuo *WebsiteUpdateOne) SetNillableFlashy(f *float64) *WebsiteUpdateOne {
	if f != nil {
		wuo.SetFlashy(*f)
	}
	return wuo
}

// AddFlashy adds f to the "flashy" field.
func (wuo *WebsiteUpdateOne) AddFlashy(f float64) *WebsiteUpdateOne {
	wuo.mutation.AddFlashy(f)
	return wuo
}

// SetAdult sets the "adult" field.
func (wuo *WebsiteUpdateOne) SetAdult(f float64) *WebsiteUpdateOne {
	wuo.mutation.ResetAdult()
	wuo.mutation.SetAdult(f)
	return wuo
}

// SetNillableAdult sets the "adult" field if the given value is not nil.
func (wuo *WebsiteUpdateOne) SetNillableAdult(f *float64) *WebsiteUpdateOne {
	if f != nil {
		wuo.SetAdult(*f)
	}
	return wuo
}

// AddAdult adds f to the "adult" field.
func (wuo *WebsiteUpdateOne) AddAdult(f float64) *WebsiteUpdateOne {
	wuo.mutation.AddAdult(f)
	return wuo
}

// SetSmart sets the "smart" field.
func (wuo *WebsiteUpdateOne) SetSmart(f float64) *WebsiteUpdateOne {
	wuo.mutation.ResetSmart()
	wuo.mutation.SetSmart(f)
	return wuo
}

// SetNillableSmart sets the "smart" field if the given value is not nil.
func (wuo *WebsiteUpdateOne) SetNillableSmart(f *float64) *WebsiteUpdateOne {
	if f != nil {
		wuo.SetSmart(*f)
	}
	return wuo
}

// AddSmart adds f to the "smart" field.
func (wuo *WebsiteUpdateOne) AddSmart(f float64) *WebsiteUpdateOne {
	wuo.mutation.AddSmart(f)
	return wuo
}

// SetBeautiful sets the "beautiful" field.
func (wuo *WebsiteUpdateOne) SetBeautiful(f float64) *WebsiteUpdateOne {
	wuo.mutation.ResetBeautiful()
	wuo.mutation.SetBeautiful(f)
	return wuo
}

// SetNillableBeautiful sets the "beautiful" field if the given value is not nil.
func (wuo *WebsiteUpdateOne) SetNillableBeautiful(f *float64) *WebsiteUpdateOne {
	if f != nil {
		wuo.SetBeautiful(*f)
	}
	return wuo
}

// AddBeautiful adds f to the "beautiful" field.
func (wuo *WebsiteUpdateOne) AddBeautiful(f float64) *WebsiteUpdateOne {
	wuo.mutation.AddBeautiful(f)
	return wuo
}

// SetLike sets the "like" field.
func (wuo *WebsiteUpdateOne) SetLike(f float64) *WebsiteUpdateOne {
	wuo.mutation.ResetLike()
	wuo.mutation.SetLike(f)
	return wuo
}

// SetNillableLike sets the "like" field if the given value is not nil.
func (wuo *WebsiteUpdateOne) SetNillableLike(f *float64) *WebsiteUpdateOne {
	if f != nil {
		wuo.SetLike(*f)
	}
	return wuo
}

// AddLike adds f to the "like" field.
func (wuo *WebsiteUpdateOne) AddLike(f float64) *WebsiteUpdateOne {
	wuo.mutation.AddLike(f)
	return wuo
}

// Mutation returns the WebsiteMutation object of the builder.
func (wuo *WebsiteUpdateOne) Mutation() *WebsiteMutation {
	return wuo.mutation
}

// Where appends a list predicates to the WebsiteUpdate builder.
func (wuo *WebsiteUpdateOne) Where(ps ...predicate.Website) *WebsiteUpdateOne {
	wuo.mutation.Where(ps...)
	return wuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (wuo *WebsiteUpdateOne) Select(field string, fields ...string) *WebsiteUpdateOne {
	wuo.fields = append([]string{field}, fields...)
	return wuo
}

// Save executes the query and returns the updated Website entity.
func (wuo *WebsiteUpdateOne) Save(ctx context.Context) (*Website, error) {
	return withHooks(ctx, wuo.sqlSave, wuo.mutation, wuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (wuo *WebsiteUpdateOne) SaveX(ctx context.Context) *Website {
	node, err := wuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (wuo *WebsiteUpdateOne) Exec(ctx context.Context) error {
	_, err := wuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (wuo *WebsiteUpdateOne) ExecX(ctx context.Context) {
	if err := wuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (wuo *WebsiteUpdateOne) sqlSave(ctx context.Context) (_node *Website, err error) {
	_spec := sqlgraph.NewUpdateSpec(website.Table, website.Columns, sqlgraph.NewFieldSpec(website.FieldID, field.TypeInt))
	id, ok := wuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Website.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := wuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, website.FieldID)
		for _, f := range fields {
			if !website.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != website.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := wuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := wuo.mutation.Name(); ok {
		_spec.SetField(website.FieldName, field.TypeString, value)
	}
	if value, ok := wuo.mutation.FilePath(); ok {
		_spec.SetField(website.FieldFilePath, field.TypeString, value)
	}
	if value, ok := wuo.mutation.URL(); ok {
		_spec.SetField(website.FieldURL, field.TypeString, value)
	}
	if value, ok := wuo.mutation.Flashy(); ok {
		_spec.SetField(website.FieldFlashy, field.TypeFloat64, value)
	}
	if value, ok := wuo.mutation.AddedFlashy(); ok {
		_spec.AddField(website.FieldFlashy, field.TypeFloat64, value)
	}
	if value, ok := wuo.mutation.Adult(); ok {
		_spec.SetField(website.FieldAdult, field.TypeFloat64, value)
	}
	if value, ok := wuo.mutation.AddedAdult(); ok {
		_spec.AddField(website.FieldAdult, field.TypeFloat64, value)
	}
	if value, ok := wuo.mutation.Smart(); ok {
		_spec.SetField(website.FieldSmart, field.TypeFloat64, value)
	}
	if value, ok := wuo.mutation.AddedSmart(); ok {
		_spec.AddField(website.FieldSmart, field.TypeFloat64, value)
	}
	if value, ok := wuo.mutation.Beautiful(); ok {
		_spec.SetField(website.FieldBeautiful, field.TypeFloat64, value)
	}
	if value, ok := wuo.mutation.AddedBeautiful(); ok {
		_spec.AddField(website.FieldBeautiful, field.TypeFloat64, value)
	}
	if value, ok := wuo.mutation.Like(); ok {
		_spec.SetField(website.FieldLike, field.TypeFloat64, value)
	}
	if value, ok := wuo.mutation.AddedLike(); ok {
		_spec.AddField(website.FieldLike, field.TypeFloat64, value)
	}
	_node = &Website{config: wuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, wuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{website.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	wuo.mutation.done = true
	return _node, nil
}
